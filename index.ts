/* 
  –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–∞—ë—Ç—Å—è –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –¥–µ—Ä–µ–≤–æ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
  –õ–∏—Å—Ç—å—è –¥–µ—Ä–µ–≤–∞ ‚Äï —Å—Ç—Ä–æ–∫–∏ —Å {placeholder}'–∞–º–∏

  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º—ã, –∫–∞–∫ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
  –õ–∏—Å—Ç—å—è –¥–µ—Ä–µ–≤–∞ ‚Äï format-—Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–º–µ–Ω—è—é—â–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞-–æ–±—ä–µ–∫—Ç–∞
  –°–∏–≥–Ω–∞—Ç—É—Ä–∞ format-—Ñ—É–Ω–∫—Ü–∏–∏:
    (vars?: { [key: string]: string | number }) => string

  NOTE: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é format-—Ñ—É–Ω–∫—Ü–∏–∏
 */

const sourceStrings = {
  hello: '–î–æ–±—Ä—ã–π –≤–µ—á–æ—Ä, {username}!',
  admin: {
    objectForm: {
      label: '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      hint: '–ù–µ –º–µ–Ω–µ–µ {minLength} —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å ‚Äï {length}',
    },
  },
};

const t = i18n(sourceStrings);
console.log('üöÄ Starting tests...');


const testFormat = '–î–æ–±—Ä—ã–π –≤–µ—á–æ—Ä, me!' === t.hello({ username: 'me' });
console.assert(testFormat, '  ‚ùå First level failed!');

const testDepth = '–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' === t.admin.objectForm.label();
console.assert(testDepth, '  ‚ùå Generic depth failed!');

const testDepthFmt =
  '–ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å ‚Äï 6' ===
  t.admin.objectForm.hint({ minLength: 8, length: 6 });
console.assert(testDepthFmt, '  ‚ùå Variables failed');

if (testDepth && testDepthFmt && testFormat)
  console.log('üéâ Good! All tests passed.');

// === implementation ===

type Input<T> = {
  [key: string]: Input<T> | string;
};

type Result<T> = {
  [K in keyof T]: T[K] extends string ? ((params?: ParamsType) => string) : Result<T[K]>
};

type ParamsType = Record<string | number | symbol, string | number>

function i18n<T extends Input<T>>(strings: T): Result<T> {
  return getFormattedObject(strings)
}


function getFormattedObject<T extends Input<T>>(strings: T): Result<T> {
  const returnObj = {} as Result<T>
  for (let key in strings) {
    let value = null
    if (typeof strings[key] === 'object') {
      value = getFormattedObject(strings[key] as Input<T>)
    } else if (typeof strings[key] === 'string') {
      value = (params?: ParamsType) => formatString(strings[key] as string, params)
    }
    returnObj[key] = value as T[Extract<keyof T, string>] extends string ? (params?: ParamsType) => string : Result<T[Extract<keyof T, string>]>
  }
  return returnObj
}

function formatString(string: string, params?: ParamsType): string {
  for (let key in params) {
    string = string.replace(`{${key}}`, params[key].toString())
  }
  return string
}